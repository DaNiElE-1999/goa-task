// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books client
//
// Command:
// $ goa gen books/design

package books

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "books" service client.
type Client struct {
	CreateEndpoint      goa.Endpoint
	AllEndpoint         goa.Endpoint
	UpdateBookEndpoint  goa.Endpoint
	GetBookEndpoint     goa.Endpoint
	DeleteBookEndpoint  goa.Endpoint
	UploadEndpoint      goa.Endpoint
	UploadImageEndpoint goa.Endpoint
}

// NewClient initializes a "books" service client given the endpoints.
func NewClient(create, all, updateBook, getBook, deleteBook, upload, uploadImage goa.Endpoint) *Client {
	return &Client{
		CreateEndpoint:      create,
		AllEndpoint:         all,
		UpdateBookEndpoint:  updateBook,
		GetBookEndpoint:     getBook,
		DeleteBookEndpoint:  deleteBook,
		UploadEndpoint:      upload,
		UploadImageEndpoint: uploadImage,
	}
}

// Create calls the "create" endpoint of the "books" service.
func (c *Client) Create(ctx context.Context, p *Book) (res *Book, err error) {
	var ires any
	ires, err = c.CreateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Book), nil
}

// All calls the "all" endpoint of the "books" service.
func (c *Client) All(ctx context.Context) (res []*Book, err error) {
	var ires any
	ires, err = c.AllEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.([]*Book), nil
}

// UpdateBook calls the "updateBook" endpoint of the "books" service.
func (c *Client) UpdateBook(ctx context.Context, p *UpdateBookPayload) (res *Book, err error) {
	var ires any
	ires, err = c.UpdateBookEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Book), nil
}

// GetBook calls the "getBook" endpoint of the "books" service.
func (c *Client) GetBook(ctx context.Context, p *GetBookPayload) (res *Book, err error) {
	var ires any
	ires, err = c.GetBookEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Book), nil
}

// DeleteBook calls the "deleteBook" endpoint of the "books" service.
func (c *Client) DeleteBook(ctx context.Context, p *DeleteBookPayload) (err error) {
	_, err = c.DeleteBookEndpoint(ctx, p)
	return
}

// Upload calls the "upload" endpoint of the "books" service.
// Upload may return the following errors:
//   - "invalid_media_type" (type *goa.ServiceError): Error returned when the Content-Type header does not define a multipart request.
//   - "invalid_multipart_request" (type *goa.ServiceError): Error returned when the request body is not a valid multipart content.
//   - "internal_error" (type *goa.ServiceError): Fault while processing upload.
//   - error: internal error
func (c *Client) Upload(ctx context.Context, p *UploadPayload, req io.ReadCloser) (err error) {
	_, err = c.UploadEndpoint(ctx, &UploadRequestData{Payload: p, Body: req})
	return
}

// UploadImage calls the "uploadImage" endpoint of the "books" service.
func (c *Client) UploadImage(ctx context.Context, p *UploadImagePayload) (err error) {
	_, err = c.UploadImageEndpoint(ctx, p)
	return
}
