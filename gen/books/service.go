// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books service
//
// Command:
// $ goa gen books/design

package books

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// API for Books
type Service interface {
	// Create implements create.
	Create(context.Context, *Book) (res *Book, err error)
	// All implements all.
	All(context.Context) (res []*Book, err error)
	// UpdateBook implements updateBook.
	UpdateBook(context.Context, *UpdateBookPayload) (res *Book, err error)
	// GetBook implements getBook.
	GetBook(context.Context, *GetBookPayload) (res *Book, err error)
	// DeleteBook implements deleteBook.
	DeleteBook(context.Context, *DeleteBookPayload) (err error)
	// Upload implements upload.
	Upload(context.Context, *UploadPayload, io.ReadCloser) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "books"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [6]string{"create", "all", "updateBook", "getBook", "deleteBook", "upload"}

// Book is the payload type of the books service create method.
type Book struct {
	// Unique ID of the book
	ID *int
	// Title of the book
	Title *string
	// Author of the book
	Author *string
	// Cover of the book
	BookCover *string
	// Date the book has been published
	PublishedAt *string
}

// DeleteBookPayload is the payload type of the books service deleteBook method.
type DeleteBookPayload struct {
	// Book ID
	ID *int
}

// GetBookPayload is the payload type of the books service getBook method.
type GetBookPayload struct {
	// Book ID
	ID *int
}

// UpdateBookPayload is the payload type of the books service updateBook method.
type UpdateBookPayload struct {
	// Book ID
	ID   *int
	Book *Book
}

// UploadPayload is the payload type of the books service upload method.
type UploadPayload struct {
	// Content-Type header, must define value for multipart boundary.
	ContentType string
	// Dir is the relative path to the file directory where the uploaded content is
	// saved.
	Dir string
}

// MakeInvalidMediaType builds a goa.ServiceError from an error.
func MakeInvalidMediaType(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid_media_type", false, false, false)
}

// MakeInvalidMultipartRequest builds a goa.ServiceError from an error.
func MakeInvalidMultipartRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid_multipart_request", false, false, false)
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "internal_error", false, false, false)
}
