// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books HTTP client CLI support package
//
// Command:
// $ goa gen books/design

package client

import (
	books "books/gen/books"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the books create endpoint from CLI
// flags.
func BuildCreatePayload(booksCreateBody string) (*books.Book, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(booksCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ID\": 8956346360473798852,\n      \"author\": \"Omnis molestiae sed.\",\n      \"bookCover\": \"In optio dolor sed quo porro.\",\n      \"publishedAt\": \"Natus magni laborum.\",\n      \"title\": \"Sunt ut sint accusamus.\"\n   }'")
		}
	}
	v := &books.Book{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}

	return v, nil
}

// BuildUpdateBookPayload builds the payload for the books updateBook endpoint
// from CLI flags.
func BuildUpdateBookPayload(booksUpdateBookBody string, booksUpdateBookID string) (*books.UpdateBookPayload, error) {
	var err error
	var body UpdateBookRequestBody
	{
		err = json.Unmarshal([]byte(booksUpdateBookBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"book\": {\n         \"ID\": 267326349154593595,\n         \"author\": \"Expedita commodi facere magni et.\",\n         \"bookCover\": \"Est quibusdam rerum.\",\n         \"publishedAt\": \"Dolor labore.\",\n         \"title\": \"Quasi saepe sunt est dolor.\"\n      }\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksUpdateBookID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.UpdateBookPayload{}
	if body.Book != nil {
		v.Book = marshalBookRequestBodyToBooksBook(body.Book)
	}
	v.ID = &id

	return v, nil
}

// BuildGetBookPayload builds the payload for the books getBook endpoint from
// CLI flags.
func BuildGetBookPayload(booksGetBookID string) (*books.GetBookPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksGetBookID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.GetBookPayload{}
	v.ID = &id

	return v, nil
}

// BuildDeleteBookPayload builds the payload for the books deleteBook endpoint
// from CLI flags.
func BuildDeleteBookPayload(booksDeleteBookID string) (*books.DeleteBookPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksDeleteBookID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.DeleteBookPayload{}
	v.ID = &id

	return v, nil
}

// BuildUploadPayload builds the payload for the books upload endpoint from CLI
// flags.
func BuildUploadPayload(booksUploadDir string, booksUploadContentType string) (*books.UploadPayload, error) {
	var err error
	var dir string
	{
		dir = booksUploadDir
	}
	var contentType string
	{
		if booksUploadContentType != "" {
			contentType = booksUploadContentType
			err = goa.MergeErrors(err, goa.ValidatePattern("content_type", contentType, "multipart/[^;]+; boundary=.+"))
			if err != nil {
				return nil, err
			}
		}
	}
	v := &books.UploadPayload{}
	v.Dir = dir
	v.ContentType = contentType

	return v, nil
}

// BuildUploadImagePayload builds the payload for the books uploadImage
// endpoint from CLI flags.
func BuildUploadImagePayload(booksUploadImageBody string) (*books.UploadImagePayload, error) {
	var err error
	var body UploadImageRequestBody
	{
		err = json.Unmarshal([]byte(booksUploadImageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"content_type\": \"multipart/\U000c737d鰒𩴿; boundary=�����\",\n      \"image\": \"RXQgc2ludCBjb25zZXF1dW50dXIgdXQgYWxpYXMgZW9zLg==\"\n   }'")
		}
	}
	v := &books.UploadImagePayload{
		Image:       body.Image,
		ContentType: body.ContentType,
	}
	{
		var zero string
		if v.ContentType == zero {
			v.ContentType = "multipart/form-data; boundary=goa"
		}
	}

	return v, nil
}
