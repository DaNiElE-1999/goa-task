// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books HTTP client CLI support package
//
// Command:
// $ goa gen books/design

package client

import (
	books "books/gen/books"
	"encoding/json"
	"fmt"
	"strconv"
)

// BuildCreatePayload builds the payload for the books create endpoint from CLI
// flags.
func BuildCreatePayload(booksCreateBody string) (*books.Book, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(booksCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"author\": \"Sunt ut sint accusamus.\",\n      \"bookCover\": \"Omnis molestiae sed.\",\n      \"id\": 4527815212959476002,\n      \"publishedAt\": \"In optio dolor sed quo porro.\",\n      \"title\": \"Ipsam sed.\"\n   }'")
		}
	}
	v := &books.Book{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}

	return v, nil
}

// BuildUpdateBookPayload builds the payload for the books updateBook endpoint
// from CLI flags.
func BuildUpdateBookPayload(booksUpdateBookBody string, booksUpdateBookID string) (*books.UpdateBookPayload, error) {
	var err error
	var body UpdateBookRequestBody
	{
		err = json.Unmarshal([]byte(booksUpdateBookBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"book\": {\n         \"author\": \"Eum maiores maxime.\",\n         \"bookCover\": \"Non dolores quasi saepe sunt est dolor.\",\n         \"id\": 4940795916846100831,\n         \"publishedAt\": \"Expedita commodi facere magni et.\",\n         \"title\": \"Eos consequuntur tempore.\"\n      }\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksUpdateBookID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.UpdateBookPayload{}
	if body.Book != nil {
		v.Book = marshalBookRequestBodyToBooksBook(body.Book)
	}
	v.ID = &id

	return v, nil
}

// BuildGetBookPayload builds the payload for the books getBook endpoint from
// CLI flags.
func BuildGetBookPayload(booksGetBookID string) (*books.GetBookPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksGetBookID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.GetBookPayload{}
	v.ID = &id

	return v, nil
}

// BuildDeleteBookPayload builds the payload for the books deleteBook endpoint
// from CLI flags.
func BuildDeleteBookPayload(booksDeleteBookID string) (*books.DeleteBookPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksDeleteBookID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.DeleteBookPayload{}
	v.ID = &id

	return v, nil
}
