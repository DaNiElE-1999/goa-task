// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books HTTP client types
//
// Command:
// $ goa gen books/design

package client

import (
	books "books/gen/books"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "books" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Unique ID of the book
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// Cover of the book
	BookCover string `form:"bookCover" json:"bookCover" xml:"bookCover"`
	// Date the book has been published
	PublishedAt string `form:"publishedAt" json:"publishedAt" xml:"publishedAt"`
}

// UpdateBookRequestBody is the type of the "books" service "updateBook"
// endpoint HTTP request body.
type UpdateBookRequestBody struct {
	Book *BookRequestBody `form:"book,omitempty" json:"book,omitempty" xml:"book,omitempty"`
}

// UploadImageRequestBody is the type of the "books" service "uploadImage"
// endpoint HTTP request body.
type UploadImageRequestBody struct {
	// Binary data of the image
	Image []byte `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// Content-Type header, must define value for multipart boundary.
	ContentType string `form:"content_type" json:"content_type" xml:"content_type"`
}

// CreateResponseBody is the type of the "books" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// Unique ID of the book
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// AllResponseBody is the type of the "books" service "all" endpoint HTTP
// response body.
type AllResponseBody []*BookResponse

// UpdateBookResponseBody is the type of the "books" service "updateBook"
// endpoint HTTP response body.
type UpdateBookResponseBody struct {
	// Unique ID of the book
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// GetBookResponseBody is the type of the "books" service "getBook" endpoint
// HTTP response body.
type GetBookResponseBody struct {
	// Unique ID of the book
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// UploadInvalidMediaTypeResponseBody is the type of the "books" service
// "upload" endpoint HTTP response body for the "invalid_media_type" error.
type UploadInvalidMediaTypeResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UploadInvalidMultipartRequestResponseBody is the type of the "books" service
// "upload" endpoint HTTP response body for the "invalid_multipart_request"
// error.
type UploadInvalidMultipartRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UploadInternalErrorResponseBody is the type of the "books" service "upload"
// endpoint HTTP response body for the "internal_error" error.
type UploadInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BookResponse is used to define fields on response body types.
type BookResponse struct {
	// Unique ID of the book
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// BookRequestBody is used to define fields on request body types.
type BookRequestBody struct {
	// Unique ID of the book
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// Cover of the book
	BookCover string `form:"bookCover" json:"bookCover" xml:"bookCover"`
	// Date the book has been published
	PublishedAt string `form:"publishedAt" json:"publishedAt" xml:"publishedAt"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "books" service.
func NewCreateRequestBody(p *books.Book) *CreateRequestBody {
	body := &CreateRequestBody{
		ID:          p.ID,
		Title:       p.Title,
		Author:      p.Author,
		BookCover:   p.BookCover,
		PublishedAt: p.PublishedAt,
	}
	return body
}

// NewUpdateBookRequestBody builds the HTTP request body from the payload of
// the "updateBook" endpoint of the "books" service.
func NewUpdateBookRequestBody(p *books.UpdateBookPayload) *UpdateBookRequestBody {
	body := &UpdateBookRequestBody{}
	if p.Book != nil {
		body.Book = marshalBooksBookToBookRequestBody(p.Book)
	}
	return body
}

// NewUploadImageRequestBody builds the HTTP request body from the payload of
// the "uploadImage" endpoint of the "books" service.
func NewUploadImageRequestBody(p *books.UploadImagePayload) *UploadImageRequestBody {
	body := &UploadImageRequestBody{
		Image:       p.Image,
		ContentType: p.ContentType,
	}
	{
		var zero string
		if body.ContentType == zero {
			body.ContentType = "multipart/form-data; boundary=goa"
		}
	}
	return body
}

// NewCreateBookOK builds a "books" service "create" endpoint result from a
// HTTP "OK" response.
func NewCreateBookOK(body *CreateResponseBody) *books.Book {
	v := &books.Book{
		ID:          body.ID,
		Title:       *body.Title,
		Author:      *body.Author,
		BookCover:   *body.BookCover,
		PublishedAt: *body.PublishedAt,
	}

	return v
}

// NewAllBookOK builds a "books" service "all" endpoint result from a HTTP "OK"
// response.
func NewAllBookOK(body []*BookResponse) []*books.Book {
	v := make([]*books.Book, len(body))
	for i, val := range body {
		v[i] = unmarshalBookResponseToBooksBook(val)
	}

	return v
}

// NewUpdateBookBookOK builds a "books" service "updateBook" endpoint result
// from a HTTP "OK" response.
func NewUpdateBookBookOK(body *UpdateBookResponseBody) *books.Book {
	v := &books.Book{
		ID:          body.ID,
		Title:       *body.Title,
		Author:      *body.Author,
		BookCover:   *body.BookCover,
		PublishedAt: *body.PublishedAt,
	}

	return v
}

// NewGetBookBookOK builds a "books" service "getBook" endpoint result from a
// HTTP "OK" response.
func NewGetBookBookOK(body *GetBookResponseBody) *books.Book {
	v := &books.Book{
		ID:          body.ID,
		Title:       *body.Title,
		Author:      *body.Author,
		BookCover:   *body.BookCover,
		PublishedAt: *body.PublishedAt,
	}

	return v
}

// NewUploadInvalidMediaType builds a books service upload endpoint
// invalid_media_type error.
func NewUploadInvalidMediaType(body *UploadInvalidMediaTypeResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUploadInvalidMultipartRequest builds a books service upload endpoint
// invalid_multipart_request error.
func NewUploadInvalidMultipartRequest(body *UploadInvalidMultipartRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUploadInternalError builds a books service upload endpoint internal_error
// error.
func NewUploadInternalError(body *UploadInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.BookCover == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bookCover", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publishedAt", "body"))
	}
	return
}

// ValidateUpdateBookResponseBody runs the validations defined on
// UpdateBookResponseBody
func ValidateUpdateBookResponseBody(body *UpdateBookResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.BookCover == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bookCover", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publishedAt", "body"))
	}
	return
}

// ValidateGetBookResponseBody runs the validations defined on
// GetBookResponseBody
func ValidateGetBookResponseBody(body *GetBookResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.BookCover == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bookCover", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publishedAt", "body"))
	}
	return
}

// ValidateUploadInvalidMediaTypeResponseBody runs the validations defined on
// upload_invalid_media_type_response_body
func ValidateUploadInvalidMediaTypeResponseBody(body *UploadInvalidMediaTypeResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUploadInvalidMultipartRequestResponseBody runs the validations
// defined on upload_invalid_multipart_request_response_body
func ValidateUploadInvalidMultipartRequestResponseBody(body *UploadInvalidMultipartRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUploadInternalErrorResponseBody runs the validations defined on
// upload_internal_error_response_body
func ValidateUploadInternalErrorResponseBody(body *UploadInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBookResponse runs the validations defined on BookResponse
func ValidateBookResponse(body *BookResponse) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.BookCover == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bookCover", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publishedAt", "body"))
	}
	return
}
