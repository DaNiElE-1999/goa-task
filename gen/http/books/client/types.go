// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books HTTP client types
//
// Command:
// $ goa gen books/design

package client

import (
	books "books/gen/books"
)

// CreateRequestBody is the type of the "books" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Unique ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// UpdateBookRequestBody is the type of the "books" service "updateBook"
// endpoint HTTP request body.
type UpdateBookRequestBody struct {
	Book *BookRequestBody `form:"book,omitempty" json:"book,omitempty" xml:"book,omitempty"`
}

// CreateResponseBody is the type of the "books" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// Unique ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// AllResponseBody is the type of the "books" service "all" endpoint HTTP
// response body.
type AllResponseBody []*BookResponse

// UpdateBookResponseBody is the type of the "books" service "updateBook"
// endpoint HTTP response body.
type UpdateBookResponseBody struct {
	// Unique ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// GetBookResponseBody is the type of the "books" service "getBook" endpoint
// HTTP response body.
type GetBookResponseBody struct {
	// Unique ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// BookResponse is used to define fields on response body types.
type BookResponse struct {
	// Unique ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// BookRequestBody is used to define fields on request body types.
type BookRequestBody struct {
	// Unique ID of the book
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "books" service.
func NewCreateRequestBody(p *books.Book) *CreateRequestBody {
	body := &CreateRequestBody{
		ID:          p.ID,
		Title:       p.Title,
		Author:      p.Author,
		BookCover:   p.BookCover,
		PublishedAt: p.PublishedAt,
	}
	return body
}

// NewUpdateBookRequestBody builds the HTTP request body from the payload of
// the "updateBook" endpoint of the "books" service.
func NewUpdateBookRequestBody(p *books.UpdateBookPayload) *UpdateBookRequestBody {
	body := &UpdateBookRequestBody{}
	if p.Book != nil {
		body.Book = marshalBooksBookToBookRequestBody(p.Book)
	}
	return body
}

// NewCreateBookOK builds a "books" service "create" endpoint result from a
// HTTP "OK" response.
func NewCreateBookOK(body *CreateResponseBody) *books.Book {
	v := &books.Book{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}

	return v
}

// NewAllBookOK builds a "books" service "all" endpoint result from a HTTP "OK"
// response.
func NewAllBookOK(body []*BookResponse) []*books.Book {
	v := make([]*books.Book, len(body))
	for i, val := range body {
		v[i] = unmarshalBookResponseToBooksBook(val)
	}

	return v
}

// NewUpdateBookBookOK builds a "books" service "updateBook" endpoint result
// from a HTTP "OK" response.
func NewUpdateBookBookOK(body *UpdateBookResponseBody) *books.Book {
	v := &books.Book{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}

	return v
}

// NewGetBookBookOK builds a "books" service "getBook" endpoint result from a
// HTTP "OK" response.
func NewGetBookBookOK(body *GetBookResponseBody) *books.Book {
	v := &books.Book{
		ID:          body.ID,
		Title:       body.Title,
		Author:      body.Author,
		BookCover:   body.BookCover,
		PublishedAt: body.PublishedAt,
	}

	return v
}
