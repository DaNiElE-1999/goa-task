// Code generated by goa v3.13.2, DO NOT EDIT.
//
// books HTTP client types
//
// Command:
// $ goa gen books/design

package client

import (
	books "books/gen/books"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "books" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// id
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// Date the book has been published
	PublishedAt string `form:"publishedAt" json:"publishedAt" xml:"publishedAt"`
}

// UpdateBookRequestBody is the type of the "books" service "updateBook"
// endpoint HTTP request body.
type UpdateBookRequestBody struct {
	Book *BookRequestBody `form:"book,omitempty" json:"book,omitempty" xml:"book,omitempty"`
}

// CreateResponseBody is the type of the "books" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// id
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// AllResponseBody is the type of the "books" service "all" endpoint HTTP
// response body.
type AllResponseBody []*BookResponse

// UpdateBookResponseBody is the type of the "books" service "updateBook"
// endpoint HTTP response body.
type UpdateBookResponseBody struct {
	// id
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// GetBookResponseBody is the type of the "books" service "getBook" endpoint
// HTTP response body.
type GetBookResponseBody struct {
	// id
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// BookResponse is used to define fields on response body types.
type BookResponse struct {
	// id
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Cover of the book
	BookCover *string `form:"bookCover,omitempty" json:"bookCover,omitempty" xml:"bookCover,omitempty"`
	// Date the book has been published
	PublishedAt *string `form:"publishedAt,omitempty" json:"publishedAt,omitempty" xml:"publishedAt,omitempty"`
}

// BookRequestBody is used to define fields on request body types.
type BookRequestBody struct {
	// id
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// Cover of the book
	BookCover string `form:"bookCover" json:"bookCover" xml:"bookCover"`
	// Date the book has been published
	PublishedAt string `form:"publishedAt" json:"publishedAt" xml:"publishedAt"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "books" service.
func NewCreateRequestBody(p *books.Book) *CreateRequestBody {
	body := &CreateRequestBody{
		ID:          p.ID,
		Title:       p.Title,
		Author:      p.Author,
		PublishedAt: p.PublishedAt,
	}
	return body
}

// NewUpdateBookRequestBody builds the HTTP request body from the payload of
// the "updateBook" endpoint of the "books" service.
func NewUpdateBookRequestBody(p *books.UpdateBookPayload) *UpdateBookRequestBody {
	body := &UpdateBookRequestBody{}
	if p.Book != nil {
		body.Book = marshalBooksBookToBookRequestBody(p.Book)
	}
	return body
}

// NewCreateBookOK builds a "books" service "create" endpoint result from a
// HTTP "OK" response.
func NewCreateBookOK(body *CreateResponseBody) *books.Book {
	v := &books.Book{
		ID:          body.ID,
		Title:       *body.Title,
		Author:      *body.Author,
		BookCover:   *body.BookCover,
		PublishedAt: *body.PublishedAt,
	}

	return v
}

// NewAllBookOK builds a "books" service "all" endpoint result from a HTTP "OK"
// response.
func NewAllBookOK(body []*BookResponse) []*books.Book {
	v := make([]*books.Book, len(body))
	for i, val := range body {
		v[i] = unmarshalBookResponseToBooksBook(val)
	}

	return v
}

// NewUpdateBookBookOK builds a "books" service "updateBook" endpoint result
// from a HTTP "OK" response.
func NewUpdateBookBookOK(body *UpdateBookResponseBody) *books.Book {
	v := &books.Book{
		ID:          body.ID,
		Title:       *body.Title,
		Author:      *body.Author,
		BookCover:   *body.BookCover,
		PublishedAt: *body.PublishedAt,
	}

	return v
}

// NewGetBookBookOK builds a "books" service "getBook" endpoint result from a
// HTTP "OK" response.
func NewGetBookBookOK(body *GetBookResponseBody) *books.Book {
	v := &books.Book{
		ID:          body.ID,
		Title:       *body.Title,
		Author:      *body.Author,
		BookCover:   *body.BookCover,
		PublishedAt: *body.PublishedAt,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.BookCover == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bookCover", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publishedAt", "body"))
	}
	if body.BookCover != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.bookCover", *body.BookCover, "multipart/[^;]+; boundary=.+"))
	}
	return
}

// ValidateUpdateBookResponseBody runs the validations defined on
// UpdateBookResponseBody
func ValidateUpdateBookResponseBody(body *UpdateBookResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.BookCover == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bookCover", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publishedAt", "body"))
	}
	if body.BookCover != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.bookCover", *body.BookCover, "multipart/[^;]+; boundary=.+"))
	}
	return
}

// ValidateGetBookResponseBody runs the validations defined on
// GetBookResponseBody
func ValidateGetBookResponseBody(body *GetBookResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.BookCover == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bookCover", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publishedAt", "body"))
	}
	if body.BookCover != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.bookCover", *body.BookCover, "multipart/[^;]+; boundary=.+"))
	}
	return
}

// ValidateBookResponse runs the validations defined on BookResponse
func ValidateBookResponse(body *BookResponse) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.BookCover == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bookCover", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publishedAt", "body"))
	}
	if body.BookCover != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.bookCover", *body.BookCover, "multipart/[^;]+; boundary=.+"))
	}
	return
}

// ValidateBookRequestBody runs the validations defined on BookRequestBody
func ValidateBookRequestBody(body *BookRequestBody) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("body.bookCover", body.BookCover, "multipart/[^;]+; boundary=.+"))
	return
}
